# Exercise 01
# Please don't write any of the code for this exercise in this file, use a separate script to run the main program
# and separate files for the classes.
# 1. Copy-paste the lesson.rb code (you may add a Gemfile and remove the 'require's) into a new file called `scrape_rottent_tomatoes.rb`
# 2. Refactor the existing code by adding the necessary classes to hold the scraped data and fill the 'movies' array with objects instead of hashes (please use as many new files as needed to keep the classes in their own files).
# 3. In the `scrape_rotten_tomatoes.rb` script, get and report the **total sales generated by all the movies** by using methods that you write for the classes you are using.
# 4. In the same script and also using methods from your custom classes, get and report the **average movie score**.
## Scrapping web pages
# http://ruby-doc.org/core-2.2.0/File.html

## Go to console and:
## gem install nokogiri
## Reference: http://www.rubydoc.info/github/sparklemotion/nokogiri

require 'rest-client'
require 'nokogiri'

# Read the html
document = RestClient.get('http://www.rottentomatoes.com/')
# Model the DOM
dom = Nokogiri::HTML(document)
# Traverse the DOM
movies = []

dom.css('#Top-Box-Office tr').each do |movie_tr|
  score = movie_tr.css('.left_col .tMeterScore').text
  name = movie_tr.css('.middle_col a').text
  sales = movie_tr.css('.right_col').text
  movies << {
    name: name,
    sales: sales,
    score: score
  }
end

# Movies
puts movies.inspect


# Exercise 02
# Please don't write any of the code for this exercise in this file, use a separate script to run the main program
# and separate files for the classes.
# The second part for this practice is to scrape https://news.ycombinator.com
# 1. Use a class to represent the scraping client (you may call it Scraper or ScrapingClient for simplicity). Ideally this class should not be instantiated (figure out what that means in terms of the method types and how you should call them).
# 2. Use a class to represent the independent article or story, storing only the information YOU would like to keep from what is shown on the front page ONLY.
# 3. Use any other classes you think may be useful to represent some of the more complex dependencies that will be aggregated to the article or story class above (in other words, the compound attributes of the article/story class).
# 4. Write a script (`hacker_news_scraper.rb`) that uses the Scraper to read HTML from [Hacker News](https://news.ycombinator.com) and parse it into instances of your custom class and then reports the top 15 stories into a CSV file (with headings).e
